package io.jnorthr.toolkit;import io.jnorthr.toolkit.F5Data;import io.jnorthr.toolkit.F5GUI;import io.jnorthr.toolkit.Copier;import io.jnorthr.toolkit.IO;import io.jnorthr.toolkit.Mapper;import io.jnorthr.toolkit.actions.EditAction;import io.jnorthr.toolkit.actions.ToClipboardAction;import io.jnorthr.toolkit.actions.*;import java.awt.Font;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.awt.Color;import java.awt.event.KeyEvent;import java.awt.event.KeyListener;import java.awt.Dimension;import java.awt.GridLayout;import java.awt.*;import javax.swing.Icon;import javax.swing.ImageIcon;import javax.swing.AbstractAction;import javax.swing.Action;import javax.swing.JButton;import javax.swing.border.LineBorder;import javax.swing.JComponent;import javax.swing.KeyStroke;import javax.swing.SwingConstants;/** * This program demonstrates building a clickable Jbutton. * * @author james.b.northrop@googlemail.com * */public class ButtonMaker{	/**	 * a key/value map storage for known boilerplate variables of 'payloads' below that can be copied to	 * system clipboard; key is like F12 or F2 while value is true if payload text exists    */    F5Data f5data;	/**	* a key/value map storage for known boilerplate variables used in F5 GUI    */    F5GUI f5gui = new F5GUI();	// a button to stop this app - usually tied to the ESC key on a keyboard	JButton quitbutton; // = new JButton("Quit");	// a button to do a full screen print as a .png to output file in current user's folder by some key on a keyboard*/	JButton printbutton = new JButton("PrintScreen");	JButton arrowbutton = new JButton("Arrow");	JButton mybutton;    /** a hook to use of the <- left arrow key */	KeyStroke arrowKeyStrokeHit = KeyStroke.getKeyStroke("\")    /** a hook to use of the Escape key */	KeyStroke escKeyStrokeHit = KeyStroke.getKeyStroke("ESCAPE");    /** a hook to use of the Print Screen key */	KeyStroke printKeyStrokeHit = KeyStroke.getKeyStroke("PRINTSCREEN");	Color purple = new Color(255); 	Icon icon7;	/** If we need to println audit log to work, this will be true */    boolean audit = false;	/**    * Default constructor to build a JButton instance    */	public ButtonMaker(F5Data f5d)	{		f5data      = f5d;		quitbutton  = makeQuitButton();		printbutton = makePrintButton();		arrowbutton  = makeArrowButton();	} // end of constructor    /**     * A method to print an audit log if audit flag is true     *     * @param  text to show user via println     * @return void     */    public void say(String text)    {        if (audit) { println text; }    } // end of method   	/**     * Utility method to build a single JButton for each function key to paste text to the System clipboard	 * containing logic to read text from external file due to being clicked or pressing	 * it's associate Function Key.     *     * @param  text string of function key pressed, i.e. F1,F4     * @return JButton containing logic to read text from external file    */	public JButton makeButton(String key)	{		mybutton = new JButton();		mybutton.setFont(new Font("Arial", Font.PLAIN, 10));		mybutton.setBorder(new LineBorder(purple,2));   //Color.BLACK,1));    	Icon icon = new ImageIcon("images/${key}.png");    	mybutton.setIcon(icon);		if (f5data.hasPayload[key])	// true if this function key text was found/loaded		{			println "makeButton(String key): (f5data.hasPayload[${key}])="+f5data.hasPayload[key];			mybutton.setForeground(Color.WHITE);			mybutton.setBackground(Color.BLUE);			mybutton.setFont(new Font("Arial", Font.BOLD, 10));            mybutton.setContentAreaFilled(false);            mybutton.setOpaque(true);			} // end of if		else		{			mybutton.setBackground(Color.RED);            mybutton.setContentAreaFilled(false);            mybutton.setOpaque(true);			println "makeButton(String key): (f5data.hasPayload[${key}])="+f5data.hasPayload[key];				if (key.equals("ARROW"))			{				mybutton.setFont(new Font("Arial", Font.BOLD, 10));			}			else			{				mybutton.setFont(new Font("Arial", Font.BOLD, 10));    			mybutton.setIcon(icon);			} // end of else		} // end of else		/**		 * logic to provide a tool tip for the function key with focus when the F5 class is running		 */		mybutton.addMouseListener(new MouseAdapter()		{			public void mouseEntered(MouseEvent mEvt)            {		    	//cleanup();            	if (key!="A")            	{					if (f5data.hasPayload[key]  && key!="ESC" && f5data.tooltips[key].size() > 0)					{						f5gui.setHeading("${key} copies text to System Clipboard for : "+ f5data.tooltips[key]);					}					else					{						if (f5data.hasPayload[key])						{							f5gui.setHeading("${key} copies text to System Clipboard");							def sz = f5data.payloads[key].size()							f5data.buttons[key].setToolTipText( "has ${sz} bytes of text" );						}						else						{							f5gui.setHeading("F5 Utility  key=${key} 173");							f5data.dump();						} // end of else					} // end of else				} // end of if				else				{	            	if (key!="ESC")	            	{						String s = (f5gui.ok) ? "horizontally" : "vertically" ;						mybutton.setToolTipText( "Stack these buttons " + s );						f5gui.setHeading("F5 -> click this to stack buttons up or across");            		}	        		else	           		{			          	f5gui.setHeading("F5 Utility key=${key} 187");	           		} // end of lelse				} // end of else    		} // end of mouseEntered		}); // mybutton.addMouseListener		Action myAction = new ToClipboardAction(key, null, "${key} tooltip text goes here", new Integer(KeyEvent."VK_${key}"));		/**		 * when function key pressed, this is done		 */		mybutton.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent."VK_${key}", 0), key);		mybutton.getActionMap().put(key, myAction);		/**		 * when function key pressed with SHIFT key down, this edit event is done to edit/revise payload		 */		Action editAction = new EditAction("Edit", null, "Fix text within a file", new Integer(KeyEvent.VK_COPY));		mybutton.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent."VK_${key}", KeyEvent.SHIFT_MASK), "Edit");		mybutton.getActionMap().put("Edit", editAction);		say "... ButtonMaker makeButton(${key}) method ended\n"		return mybutton;	} // end of makeButton	/*	* A method to create a button to allow the whole GUI to be shifted to different side of display panel by inventing a button named 'A' rather than F3,F11 etc     *     * @return JButton ready for GUI to allow user to shift F5 display from side-to-side     */    public JButton makeArrowButton()    {    	ImageIcon arrowicon = new ImageIcon("images/F0.png");		JButton b = new JButton(arrowicon);		b.setFont(new Font("Arial", Font.BOLD, 10));		b.setBackground(Color.GREEN);        b.setContentAreaFilled(false);        b.setOpaque(true);		b.setBorder(new LineBorder(purple,2));   //Color.BLACK,1));		// add logic when 'A' button is actioned - this one moves F5 panel from bottom to left to right side of display		b.addActionListener(new ActionListener()		{			// do this when actioned			public void actionPerformed(ActionEvent e)  			{  				say "... b.actionPerformed e="+e.toString();    			f5gui.ok = !f5gui.ok;    			// when f5gui.ok is true then do vertical layout, either left edge or right edge     			if (f5gui.ok)    			{	    				say "... vertical layout: "    					f5gui.setLayout(f5gui.V);    					b.setText("<="); // 21E8    					f5gui.setSize(60, 760); // 60px wide & 760px tall						f5gui.setPreferredSize(new Dimension(60, 760)); // 60px wide & 760px tall						f5gui.windowSize = f5gui.getSize(); // remember preferred dimension	    				f5gui.right = !f5gui.right; // reverse left or right edge of screen when doing vertical layout    					if (f5gui.right) { b.setText("=>"); }    					int j = (f5gui.right) ? 0 : f5gui.screenSize.width - (f5gui.windowSize.width + 56);						int thisWindowY = Math.max(0, ((f5gui.screenSize.height - f5gui.windowSize.height) / 2) );    					f5gui.setLocation(j, thisWindowY);    					say "setLocation(${j}, ${thisWindowY}) "   				} // end of if	    			//    				// do horizontal layout when f5gui.ok boolean is false    				//    				if (!f5gui.ok)    				{	    				f5gui.setLayout(f5gui.H);    					b.setText("<=>");    					f5gui.setSize(760, 80); // 760px wide & 80px tall window panel						f5gui.setPreferredSize(new Dimension(760, 80)); // make it so ....						f5gui.windowSize = f5gui.getSize();  // ask java vm for dimensions						int windowX = Math.max(0, (f5gui.screenSize.width  - f5gui.windowSize.width ) / 2); // divide by 2 to center between left&right edge of hardware						int windowY = Math.max(0, (f5gui.screenSize.height - f5gui.windowSize.height))  - 80; // this puts our window 80px from hardware screen bottom    					f5gui.setLocation(windowX, windowY); // this does it    					say "... horizontal setLocation(${windowX}, ${windowY}) "    				} // end of if	    			f5gui.validate(); // tell jvm to do changes  			} // end of actionPerformed		}); // end of addActionListener		return b;	} // end of makeButtonA	/**	*	Setup PRINT button handling    */    public JButton makePrintButton()    {    	ImageIcon printer = new ImageIcon("images/CROSS.png");		// build an abstract shell of an action with known reaction when screen print key pressed on user keyboard        Action printAction = new PrintAction("", printer, null, new Integer(KeyEvent.VK_BACK_SPACE))		//		// tied to PRINT button; when you hover over this choice, this tooltip is shown		//		printbutton.addMouseListener(new MouseAdapter()		{			public void mouseEntered(MouseEvent mEvt)            {				printbutton.setToolTipText( f5data.tooltips["PRINTSCREEN"] );				//println "... ButtonMaker Mouse Listener hit for PRINTSCREEN !"				f5gui.setHeading(f5data.tooltips["PRINTSCREEN"]);    		}		});		printbutton.setFont(new Font("Arial", Font.BOLD, 10));		printbutton.setBackground(Color.GREEN);        printbutton.setContentAreaFilled(false);        printbutton.setOpaque(true);		printbutton.setBorder(new LineBorder(purple,2));   //Color.BLACK,1));    	printbutton.setHorizontalTextPosition(SwingConstants.CENTER);		printbutton.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(escKeyStrokeHit, "Quit");		//printbutton.setHorizontalAlignment(SwingConstants.RIGHT);		printbutton.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(printKeyStrokeHit, "PRINTSCREEN");		// this marries the abstract quitAction to the ESC button 		printbutton.getActionMap().put("Quit", printAction);		printbutton.setAction(printAction); // when button mouse clicked		printbutton.setMargin(new Insets(0,10,0,0));		return printbutton;	} // end of makePrintButton	//	Setup ESCAPE button handling        public JButton makeQuitButton()    {    	ImageIcon quiticon = new ImageIcon("images/ESC.png");				quitbutton = new JButton(quiticon);				// build an abstract shell of an action with known reaction when screen print key pressed on user keyboard        Action quitAction = new ExitAction("", quiticon, null, new Integer(KeyEvent.VK_ESCAPE))		// tied to ESC button; when you hover over ESC choice, this tooltip is shown		quitbutton.addMouseListener(new MouseAdapter()		{			public void mouseEntered(MouseEvent mEvt)            {				quitbutton.setToolTipText( f5data.tooltips["ESC"] );				f5gui.setHeading(f5data.tooltips["ESC"]);    		}		});		quitbutton.setFont(new Font("Arial", Font.BOLD, 10));		quitbutton.setBackground(Color.GREEN);        quitbutton.setContentAreaFilled(false);        quitbutton.setOpaque(true);		quitbutton.setBorder(new LineBorder(purple,2));   //Color.BLACK,1));    	quitbutton.setVerticalTextPosition(SwingConstants.CENTER);    	quitbutton.setHorizontalTextPosition(SwingConstants.CENTER);		quitbutton.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(escKeyStrokeHit, "Quit");		quitbutton.setMargin(new Insets(5,5,5,5))		// this marries the abstract quitAction to the ESC button 		quitbutton.getActionMap().put("Quit", quitAction);		quitbutton.setAction(quitAction); // when button mouse clicked		return quitbutton;	} // end of makeQuitButton	// =============================================================================    	/**      	* The primary method to execute this class. Can be used to test and examine logic and performance issues.      	*      	* argument is a list of strings provided as command-line parameters.      	*      	* @param  args a list of possibly zero entries from the command line;    	*/	public static void main(String[] args)	{		println " "		println "ButtonMaker starting"		// setup empty Map		Map myPayload = ["F12":true]		Map tools = ["F12":"this is tooltip for F12"]		// F5GUI f5gui = new F5GUI();		println "ButtonMaker making F5Data"		F5Data f5data = new F5Data();		println "ButtonMaker ended making F5Data"		println "... new constructor ButtonMaker(f5data)="+f5data;		def bm = new ButtonMaker(f5data);		println "... ButtonMaker made."		println "... makeButton F12"		JButton b = bm.makeButton("F12");		println "... bm.makeButton(F12) method gave JButton=" + b.toString();		println "... makeQuitButton()"		b = bm.makeQuitButton();		println "... bm.makeQuitButton() method gave JButton=" + b.toString();		println "... makePrintButton()"		b = bm.makePrintButton();		println "... bm.makePrintButton() method gave JButton=" + b.toString();		println "--- the end of ButtonMaker ---"	} // end of main} // end of class