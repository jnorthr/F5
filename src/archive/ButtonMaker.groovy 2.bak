package io.jnorthr.toolkit;import io.jnorthr.toolkit.F5Data;import io.jnorthr.toolkit.F5GUI;import io.jnorthr.toolkit.Copier;import io.jnorthr.toolkit.IO;import io.jnorthr.toolkit.Mapper;import io.jnorthr.toolkit.actions.EditAction;import io.jnorthr.toolkit.actions.ToClipboardAction;import io.jnorthr.toolkit.TemplateMaker;import io.jnorthr.toolkit.actions.*;import java.awt.Font;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.awt.Color;import java.awt.event.KeyEvent;import java.awt.event.KeyListener;import java.awt.Dimension;import java.awt.GridLayout;import java.awt.*;import javax.swing.Icon;import javax.swing.ImageIcon;import javax.swing.AbstractAction;import javax.swing.Action;import javax.swing.JButton;import javax.swing.border.LineBorder;import javax.swing.JComponent;import javax.swing.KeyStroke;public class ButtonMaker{    F5Data f5data;    F5GUI f5gui = new F5GUI();	JButton quitbutton = new JButton("Quit");	JButton printbutton = new JButton("Print");	JButton leftbutton = new JButton("Left");	JButton mybutton;	KeyStroke leftKeyStrokeHit = KeyStroke.getKeyStroke("LEFT")	KeyStroke escKeyStrokeHit = KeyStroke.getKeyStroke("ESCAPE");	KeyStroke printKeyStrokeHit = KeyStroke.getKeyStroke("PRINT");	Color purple = new Color(255);	Icon icon7;    boolean audit = true;    	public ButtonMaker(F5Data f5d)	{		f5data = f5d;		quitbutton = makeQuitButton();		printbutton = makePrintButton();		//leftbutton = makeLeftButton();	} // end of constructor	    public void say(String text)    {        if (audit) { println text; }    } // end of method	public JButton makeButton(String key) 	{		mybutton = new JButton();		mybutton.setFont(new Font("Arial", Font.PLAIN, 10));		mybutton.setBorder(new LineBorder(purple,2));   //Color.BLACK,1));    	//Image img = ImageIO.read(getClass().getResource("images/ESC.png"));    	Icon icon = new ImageIcon("images/${key}.png");    	mybutton.setIcon(icon);    	mybutton.setContentAreaFilled(true);        mybutton.setOpaque(true);		if (f5data.hasPayload[key])	// true if this function key text was found/loaded		{			mybutton.setForeground(Color.BLACK);			mybutton.setBackground(Color.YELLOW);			mybutton.setFont(new Font("Arial", Font.BOLD, 10));            mybutton.setContentAreaFilled(false);            mybutton.setOpaque(true);		} // end of if		else		{			if (key=="A")			{				mybutton.setFont(new Font("Arial", Font.BOLD, 10));				mybutton.setForeground(Color.MAGENTA);				mybutton.setBackground(Color.WHITE)			}			else			{				mybutton.setFont(new Font("Arial", Font.BOLD, 10));				mybutton.setForeground(Color.RED);				mybutton.setBackground(Color.CYAN);    			mybutton.setIcon(icon);	            mybutton.setOpaque(false);			} // end of else					} // end of else		mybutton.addMouseListener(new MouseAdapter() 		{			public void mouseEntered(MouseEvent mEvt)             {            	if (key!="A")            	{					if (f5data.hasPayload[key]  && key!="ESC" && f5data.tooltips[key].size() > 0) 					{						f5gui.setHeading("${key} copies text to System Clipboard for : "+ f5data.tooltips[key]);					}					else					{						if (f5data.hasPayload[key])						{								f5gui.setHeading("${key} copies text to System Clipboard");							def sz = f5data.payloads[key].size()							f5data.buttons[key].setToolTipText( "has ${sz} bytes of text" );						}						else						{							f5gui.setHeading("F5 Utility");						} // end of else					} // end of else				} // end of if 				else				{	            	if (key!="ESC")	            	{						String s = (f5gui.ok) ? "horizontally" : "vertically" ;						mybutton.setToolTipText( "Stack these buttons " + s );						f5gui.setHeading("F5 -> click this to stack buttons up or across");	            		            		}	        		else	           		{			          	f5gui.setHeading("F5 Utility");	           		} // end of lelse				} // end of else    		} // end of mouseEntered		}); // mybutton.addMouseListener				Action myAction = new ToClipboardAction(key, null, "${key} tooltip text goes here", new Integer(KeyEvent."VK_${key}"));			mybutton.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent."VK_${key}", 0), key);		mybutton.getActionMap().put(key, myAction);		Action editAction = new EditAction("Edit", null, "Fix text within a file", new Integer(KeyEvent.VK_COPY));		mybutton.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent."VK_${key}", KeyEvent.SHIFT_MASK), "Edit");		mybutton.getActionMap().put("Edit", editAction);		say "... ButtonMaker makeButton(${key}) method ended\n"				return mybutton;	} // end of makeButton    public JButton makeButtonA()    {		JButton b = makeButton("A");  		b.setFont(new Font("Arial", Font.BOLD, 14))		b.setText("<=>"); // ^ arrow        b.setOpaque(true);		b.setForeground(Color.BLACK);		b.setBackground(Color.WHITE);		b.addActionListener(new ActionListener()		{			// do this when actioned			public void actionPerformed(ActionEvent e)  			{   				say "... b.actionPerformed e="+e.toString();    			f5gui.ok = !f5gui.ok;    			if (f5gui.ok)     			{ 	    				say "... vertical layout: "    					f5gui.setLayout(f5gui.V);     					b.setText("<="); // 21E8    					f5gui.setSize(60, 760); // 60px wide & 760px tall						f5gui.setPreferredSize(new Dimension(60, 760)); // 60px wide & 760px tall						f5gui.windowSize = f5gui.getSize(); // remember preferred dimension	    				f5gui.right = !f5gui.right; // reverse left or right edge of screen when doing vertical layout    					if (f5gui.right) { b.setText("=>"); }    					int j = (f5gui.right) ? 0 : f5gui.screenSize.width - (f5gui.windowSize.width + 56);						int thisWindowY = Math.max(0, ((f5gui.screenSize.height - f5gui.windowSize.height) / 2) );    					f5gui.setLocation(j, thisWindowY);     					say "setLocation(${j}, ${thisWindowY}) "   				} // end of if    				if (!f5gui.ok)     				{ 	    				f5gui.setLayout(f5gui.H);     					b.setText("<=>");     					f5gui.setSize(760, 80); // 760px wide & 80px tall window panel						f5gui.setPreferredSize(new Dimension(760, 80)); // make it so ....						f5gui.windowSize = f5gui.getSize();  // ask java vm for dimensions						int windowX = Math.max(0, (f5gui.screenSize.width  - f5gui.windowSize.width ) / 2); // divide by 2 to center between left&right edge of hardware						int windowY = Math.max(0, (f5gui.screenSize.height - f5gui.windowSize.height))  - 80; // this puts our window 80px from hardware screen bottom    					f5gui.setLocation(windowX, windowY); // this does it    					say "... horizontal setLocation(${windowX}, ${windowY}) "    				} // end of if	    			f5gui.validate(); // tell jvm to do changes  			} // end of actionPerformed		}); // end of addActionListener		return b;	} // end of makeButtonA    public JButton makeLeftButton()    {		Action leftAction = new AbstractAction("LEFT") {			@Override			public void actionPerformed( ActionEvent evt )			{				say "\nMove leftAction run when LEFT function keys WAS pressed ...";    			f5gui.ok = !f5gui.ok;    			* when f5gui.ok is true then do vertical layout, either left edge or right edge     			if (f5gui.ok)     			{ 	   				say "... vertical layout: "    				f5gui.setLayout(f5gui.V);     				f5gui.setSize(60, 760); // 60px wide & 760px tall					f5gui.setPreferredSize(new Dimension(60, 760)); // 60px wide & 760px tall					f5gui.windowSize = f5gui.getSize(); // remember preferred dimension	    			f5gui.right = !f5gui.right; // reverse left or right edge of screen when doing vertical layout    				if (f5gui.right)    					{     					leftbutton.setText("=>");						icon7 = new ImageIcon("images/CROSS.png");    					leftbutton.setIcon(icon7);        					leftbutton.setBackground(Color.BLACK);						leftbutton.setForeground(Color.BLACK);    					leftbutton.setOpaque(true);   						leftbutton.setContentAreaFilled(true);						    					} // end of if    				int j = (f5gui.right) ? 0 : f5gui.screenSize.width - (f5gui.windowSize.width + 56);					int thisWindowY = Math.max(0, ((f5gui.screenSize.height - f5gui.windowSize.height) / 2) );    				f5gui.setLocation(j, thisWindowY);     				say "setLocation(${j}, ${thisWindowY}) "    			} // end of if	    		 *    			 * do horizontal layout when f5gui.ok boolean is false    			 *    			if (!f5gui.ok)    				{     				f5gui.setLayout(f5gui.H);    				f5gui.setSize(760, 80); // 760px wide & 80px tall window panel					f5gui.setPreferredSize(new Dimension(760, 80)); // make it so ....					f5gui.windowSize = f5gui.getSize();  // ask java vm for dimensions					int windowX = Math.max(0, (f5gui.screenSize.width  - f5gui.windowSize.width ) / 2); // divide by 2 to center between left&right edge of hardware					int windowY = Math.max(0, (f5gui.screenSize.height - f5gui.windowSize.height))  - 80; // this puts our window 80px from hardware screen bottom   					f5gui.setLocation(windowX, windowY); // this does it   					say "... horizontal setLocation(${windowX}, ${windowY}) "   				} // end of if	    		f5gui.validate(); // tell jvm to do changes			} // end of ActionPerformed		}; // end of leftAction		leftbutton.addMouseListener(new MouseAdapter() 		{			public void mouseEntered(MouseEvent mEvt)             {				leftbutton.setToolTipText( f5data.tooltips["LEFT"] );				f5gui.title = f5data.tooltips["LEFT"];    		}		});		leftbutton.setFont(new Font("Arial", Font.BOLD, 8));		leftbutton.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(leftKeyStrokeHit, "Left");				* this marries the abstract leftAction to the Left arrow button 		leftbutton.getActionMap().put("Left", leftAction);		leftbutton.setAction(leftAction); // when button mouse clicked		* this marries the leftAction event to the keyboard left arrow button 		leftAction.putValue(Action.MNEMONIC_KEY, KeyEvent.VK_LEFT);  //KeyEvent.VK_LEFT				return leftbutton;    		} // end of makeLeftButton    public JButton makePrinttButton()    {        def printAction = new PrintAction("PRINT",new Integer(KeyEvent.VK_UP))		printbutton.addMouseListener(new MouseAdapter() 		{			public void mouseEntered(MouseEvent mEvt)             {				printbutton.setToolTipText( f5data.tooltips["PRINT"] );				f5gui.title = f5data.tooltips["PRINT"];    		}		});		printbutton.setFont(new Font("Arial", Font.BOLD, 8));		printbutton.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(printKeyStrokeHit, "PRINTSCREEN");				printbutton.getActionMap().put("Quit", printAction);		printbutton.setAction(printAction); // when button mouse clicked		printAction.putValue(Action.MNEMONIC_KEY, KeyEvent.VK_UP);  //KeyEvent.VK_LEFT		return printbutton;    		} // end of makePrintButton    public JButton makeQuitButton()    {		// build an abstract shell of an action with known reaction when ESC key pressed on user keyboard		Action quitAction = new AbstractAction("ESC") {			@Override			public void actionPerformed(ActionEvent evt) {				say "\nQuit quitAction run when ESCAPE function key WAS pressed ...";				System.exit(0);			} // end of ActionPerformed		}; // end of quitAction		quitbutton.addMouseListener(new MouseAdapter() 		{			public void mouseEntered(MouseEvent mEvt)             {				quitbutton.setToolTipText( f5data.tooltips["ESC"] );				f5gui.title = f5data.tooltips["ESC"];    		}		});		quitbutton.setFont(new Font("Arial", Font.BOLD, 8));		quitbutton.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(escKeyStrokeHit, "Quit");				quitbutton.getActionMap().put("Quit", quitAction);		quitbutton.setAction(quitAction); // when button mouse clicked		quitAction.putValue(Action.MNEMONIC_KEY, KeyEvent.VK_ESCAPE);  //KeyEvent.VK_LEFT		return quitbutton;    		} // end of makeQuitButton	public static void main(String[] args) 	{		println " "		println "ButtonMaker starting"		Map myPayload = ["F12":true]		Map tools = ["F12":"this is tooltip for F12"]		println "ButtonMaker making F5Data"		F5Data f5d = new F5Data();		println "ButtonMaker ended making F5Data"				println "... new constructor ButtonMaker(f5data)="+f5data;		def bm = new ButtonMaker(f5d);		assert bm != null;		println "... ButtonMaker made."		println "... makeButton F12"		JButton b = bm.makeButton("F12");  		println "... bm.makeButton(F12) method gave JButton=" + b.toString();		println "... makeLeftButton Left"		b = bm.makeLeftButton();  		println "... bm.makeLeftButton() method gave JButton=" + b.toString();		println "--- the end of ButtonMaker ---"	} // end of main} // end of class