/*
 * This build file was copied by 'jim' at '18/2/18 15:18 PM' with Gradle 4.5 from Tools script in Google Drive
 */

// Apply the plugin to add support for Groovy
apply plugin: 'groovy'
apply plugin: 'application'

defaultTasks 'clean', 'build', 'test', 'groovydoc', 'update', 'runCopier', 'run'

// In this section you declare where to find the dependencies of your project
repositories {
    jcenter()
}
// In this section you declare the dependencies for your production and test code
dependencies {
    //compile files("/opt/jdk1.7.0_40/jre/lib/rt.jar") cant find where to get rt.jar !

    compile "org.codehaus.groovy:groovy-all:2.5.6"
    runtime "org.codehaus.groovy:groovy-all:2.5.6"

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'

    // Spock Framework basic dependencies:
    testCompile "org.codehaus.groovy:groovy-all:2.5.6"
    // The version have to be compatible with Groovy:
    testCompile "org.spockframework:spock-core:1.0-groovy-2.4"

    // Optional dependencies Spock
    // To use Hamcrest matchers:
    testCompile "org.hamcrest:hamcrest-core:1.3"

    // To mock classes:
    testRuntime "cglib:cglib-nodep:3.1"
    // Use with cglib to mock classes without default constructor:
    testRuntime "org.objenesis:objenesis:2.1"
}

// for application plugin
mainClassName = "io.jnorthr.toolkit.F5"

test {
    jvmArgs "-Dheadless=${project.hasProperty('headless') ? project.headless : true}"
}

jar {
    manifest {
        attributes 'Main-Class': 'io.jnorthr.toolkit.F5'
    }
}

// run config.file existence checker task
// Feature to confirm a configuration file exists or build a simple one if it does not
task runCopier(type: JavaExec) {
    main = "io.jnorthr.toolkit.Copier"
    classpath = sourceSets.main.runtimeClasspath
}


// run ButtonMaker task
// Feature to demo building a JButton with action() using Swing
task runButtonMaker(type: JavaExec) {
    main = "io.jnorthr.toolkit.ButtonMaker"
    classpath = sourceSets.main.runtimeClasspath
}


// run F5 KeystrokeDemo task
// Feature to demo accelerator keys in Swing
task runF5(type: JavaExec) {
    main = "io.jnorthr.toolkit.F5"
    classpath = sourceSets.main.runtimeClasspath
}


// run F5Data task
// Feature to declare defs used in the F5 class
task runF5Data(type: JavaExec) {
    main = "io.jnorthr.toolkit.F5Data"
    classpath = sourceSets.main.runtimeClasspath
}


// run F5GUI task
// Feature to see JFrame used in the F5GUI class
task runF5GUI(type: JavaExec) {
    main = "io.jnorthr.toolkit.F5GUI"
    classpath = sourceSets.main.runtimeClasspath
}

// run IO task
// Feature to get text from a file
task runIO(type: JavaExec) {
    main = "io.jnorthr.toolkit.IO"
    classpath = sourceSets.main.runtimeClasspath
}

// run Mapper task
// Feature to get text from a file
task runMapper(type: JavaExec) {
    main = "io.jnorthr.toolkit.Mapper"
    classpath = sourceSets.main.runtimeClasspath
}

// run TemplateMaker task
// Feature to get text from a file
task runTemplateMaker(type: JavaExec) {
    main = "io.jnorthr.toolkit.TemplateMaker"
    classpath = sourceSets.main.runtimeClasspath
}

// run URL task
// Feature to get text from a remote URL address
task runURL(type: JavaExec) {
    main = "io.jnorthr.toolkit.URL"
    classpath = sourceSets.main.runtimeClasspath
}

task update(type: Copy) {
    from "${buildDir}/distributions"
    into  file("distributions")
    include 'F5.*'
    //exclude 'SkeletonTest.groovy'
}

// Configuring the wrapper, the new way (since Gradle 4.8) 
// see https://docs.gradle.org/current/userguide/gradle_wrapper.html#customizing_wrapper
wrapper{
    gradleVersion = '5.5.1'
    distributionType = Wrapper.DistributionType.BIN
}

/*
task wrapper(type: Wrapper) {
    gradleVersion '5.5.1'
}
*/