/*
 * This build file was copied by 'jim' at '18/2/18 15:18 PM' with Gradle 4.5 from Tools script in Google Drive
 */

// Apply the plugin to add support for Groovy
apply plugin: 'groovy'
apply plugin: 'application'

defaultTasks 'clean', 'build', 'test', 'groovydoc', 'update', 'runCopier', 'run'

// In this section you declare where to find the dependencies of your project
repositories {
    jcenter()
}
// In this section you declare the dependencies for your production and test code
dependencies {
    //compile files("/opt/jdk1.7.0_40/jre/lib/rt.jar") cant find where to get rt.jar !

    compile "org.codehaus.groovy:groovy-all:2.5.13"
    runtime "org.codehaus.groovy:groovy-all:2.5.13"

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.13'

    // Spock Framework basic dependencies:
    testCompile "org.codehaus.groovy:groovy-all:2.5.13"

    // The version have to be compatible with Groovy:
    testCompile group: 'org.spockframework', name: 'spock-core', version: '2.0-M3-groovy-3.0'
    //testCompile "org.spockframework:spock-core:1.1-groovy-2.4-rc-2"	<- too new !!!

    // Optional dependencies Spock
    // To use Hamcrest matchers:
    testCompile "org.hamcrest:hamcrest-core:1.3"

    // To mock classes:
    testRuntime "cglib:cglib-nodep:3.1"
    
    // Use with cglib to mock classes without default constructor:
    testRuntime "org.objenesis:objenesis:2.1"
    
    //compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.13.1'
    //compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.13.1'
} // end of dependencies


// for application plugin
mainClassName = "io.jnorthr.toolkit.F5"       

test {
    jvmArgs "-Dheadless=${project.hasProperty('headless') ? project.headless : true}"
	testLogging {
		events "failed"
		exceptionFormat "full"
	}
}

jar {
    manifest {
        attributes 'Main-Class': 'io.jnorthr.toolkit.F5'
    }
}

// run ButtonMaker task
// Feature to demo building a JButton with action() using Swing
task runButtonMaker(type: JavaExec) {
    main = "io.jnorthr.toolkit.ButtonMaker"
    classpath = sourceSets.main.runtimeClasspath
}

// run Folder Chooser task
// Feature to get folder name to keep copybooks using a GUI
task runChooser(type: JavaExec) {
    main = "io.jnorthr.toolkit.Chooser"
    classpath = sourceSets.main.runtimeClasspath
}

task runChooseCopybooksFolder(type: JavaExec) {
    main = "io.jnorthr.toolkit.ChooseCopybooksFolder"
    classpath = sourceSets.main.runtimeClasspath
}


// builds a tool to interact with the System Clipboard for most operatng systems
task runCopier(type: JavaExec) {
    main = "io.jnorthr.toolkit.Copier"
    classpath = sourceSets.main.runtimeClasspath
}

// run F5 main task to offer function key access to copy text payload to system clipboards
// Feature to demo accelerator keys in Swing
task runF5(type: JavaExec) {
    main = "io.jnorthr.toolkit.F5"
    classpath = sourceSets.main.runtimeClasspath
}

// run F5Data task
// Feature to declare defs used in the F5 class
// This class retains the instance values for the currently running F5 class

task runF5Data(type: JavaExec) {
    main = "io.jnorthr.toolkit.F5Data"
    classpath = sourceSets.main.runtimeClasspath
}

// run F5GUI task
// Feature to see JFrame used in the F5GUI class
// This Swing program demonstrates function key usage from a keyboard and/or clickable Jbutton.
task runF5GUI(type: JavaExec) {
    main = "io.jnorthr.toolkit.F5GUI"
    classpath = sourceSets.main.runtimeClasspath
}

// run IO task
// Feature to get & put text for a file named after one function key like 'F11'
task runIO(type: JavaExec) {
    main = "io.jnorthr.toolkit.IO"
    classpath = sourceSets.main.runtimeClasspath
}

// run Mapper task
// Feature to find template replacement names within a template string
task runMapper(type: JavaExec) {
    main = "io.jnorthr.toolkit.Mapper"
    classpath = sourceSets.main.runtimeClasspath
}

// Initially starts to choose artifacts/folders from program working directory and saves user
// choice of path in a local text file like .txt
task runPathFinder(type: JavaExec) {
    main = "io.jnorthr.toolkit.PathFinder"
    classpath = sourceSets.main.runtimeClasspath
}

// run PositionLogic task
// Feature to move provided JFrame to different corners of the physical screen using keyboard \ key
task runPositionLogic(type: JavaExec) {
    main = "io.jnorthr.toolkit.PositionLogic"
    classpath = sourceSets.main.runtimeClasspath
} // end of task

// run PositionLogic task
// Feature to move provided JFrame to different corners of the physical screen using keyboard \ key
task runPositionTest(type: JavaExec) {
    main = "io.jnorthr.toolkit.PositionLogicTest"
    classpath = sourceSets.main.runtimeClasspath
} // end of task

// Feature contains results of most recent user dialog
task runResponse(type: JavaExec) {
    main = "io.jnorthr.toolkit.Response"
    classpath = sourceSets.main.runtimeClasspath
}

// run test task
// Feature to try new layout with accelerator & mnemonics buttons
task runMenu(type: JavaExec) {
    main = "io.jnorthr.toolkit.MenuAccessibility"
    classpath = sourceSets.main.runtimeClasspath
}

// run TemplateMaker task
// Feature to get text for this function key and save it with known .txt filename 
task runTemplateMaker(type: JavaExec) {
    main = "io.jnorthr.toolkit.TemplateMaker"
    classpath = sourceSets.main.runtimeClasspath
}

// run TemplateMaker task
// Feature to get text for this function key and save it with known .txt filename 
task runTemplateGUI(type: JavaExec) {
    main = "io.jnorthr.toolkit.TemplateGUI"
    classpath = sourceSets.main.runtimeClasspath
}

// ===================================================
// puts copies of jar & tar files into another folder
task update(type: Copy) {
    from "${buildDir}/distributions"
    into  file("distributions")
    include 'F5.*'
    //exclude 'SkeletonTest.groovy'
}

// Configuring the wrapper, the new way (since Gradle 4.8) 
// see https://docs.gradle.org/current/userguide/gradle_wrapper.html#customizing_wrapper
wrapper{
    gradleVersion = '6.6'
    distributionType = Wrapper.DistributionType.BIN
}
